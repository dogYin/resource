

一、 ASM 中的访问者模式
    ASM 库是 Visitor 模式的典型应用。

二、ASM 中几个重要的类
    在 ASM 库中存在以下几个重要的类：
        1. ClassReader：它将字节数组或者 class 文件读入到内存当中，并以树的数据结构表示，树中的一个节点代表着 class 文件中的某个区域。
            可以将 ClassReader 看作是 Visitor 模式中的访问者的实现类。
        2. ClassVisitor（抽象类）：ClassReader 对象创建之后，调用 ClassReader#accept() 方法，传入一个 ClassVisitor 对象。
            在 ClassReader 中遍历树结构的不同节点时会调用 ClassVisitor 对象中不同的 visit() 方法，从而实现对字节码的修改。
            在 ClassVisitor 中的一些访问会产生子过程，比如visitMethod 会产生 MethodVisitor 的调用，
            visitField 会产生对 FieldVisitor 的调用，用户也可以对这些 Visitor 进行自己的实现，从而达到对这些子节点的字节码的访问和修改。
            在 ASM 的访问者模式中，用户还可以提供多种不同操作的 ClassVisitor 的实现，并以责任链的模式提供给 ClassReader 来使用，
            而 ClassReader 只需要 accept 责任链中的头节点处的 ClassVisitor。
        3. ClassWriter：ClassWriter 是 ClassVisitor 的实现类，它是生成字节码的工具类，它一般是责任链中的最后一个节点，
            其之前的每一个 ClassVisitor 都是致力于对原始字节码做修改，而 ClassWriter 的操作则是老实得把每一个节点修改后的字节码输出为字节数组。

三、core API
    MethodVisitor & AdviceAdapter
        1. MethodVisitor 是一个抽象类，当 ASM 的 ClassReader 读取到 Method 时就转入 MethodVisitor 接口处理。
        2. AdviceAdapter 是 MethodVisitor 的子类，使用 AdviceAdapter 可以更方便的修改方法的字节码。
        3. AdviceAdapter 中比较重要的几个方法如下：
            void visitCode()：表示 ASM 开始扫描这个方法
            void onMethodEnter()：进入这个方法
            void onMethodExit()：即将从这个方法出去
            void onVisitEnd()：表示方法扫码完毕


四、ASM 的工作流程
    ASM 大致的工作流程是：
    1. ClassReader 读取字节码到内存中，生成用于表示该字节码的内部表示的树，ClassReader 对应于访问者模式中的元素
    2. 组装 ClassVisitor 责任链，这一系列 ClassVisitor 完成了对字节码一系列不同的字节码修改工作，对应于访问者模式中的访问者 Visitor
    3. 然后调用 ClassReader#accept() 方法，传入 ClassVisitor 对象，此 ClassVisitor 是责任链的头结点，经过责任链中每一个 ClassVisitor
        的对已加载进内存的字节码的树结构上的每个节点的访问和修改
    4. 最后，在责任链的末端，调用 ClassWriter 这个 visitor 进行修改后的字节码的输出工作







